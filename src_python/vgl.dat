import os, sys							import os, sys
import multiprocessing						import multiprocessing
import subprocess						import subprocess
import shlex							import shlex
from multiprocessing.pool import ThreadPool			from multiprocessing.pool import ThreadPool

import numpy as np						import numpy as np
from scipy.optimize import fmin					from scipy.optimize import fmin
from mpl_toolkits.axes_grid1.inset_locator import inset_axes	from mpl_toolkits.axes_grid1.inset_locator import inset_axes

from bridge import *						from bridge import *
from rrgm_functions import *					from rrgm_functions import *
from three_particle_functions import *				from three_particle_functions import *
from triton_width_gen import *					from triton_width_gen import *
from readLITsource_3body import *				from readLITsource_3body import *
from BasisVisualization import visbas				from BasisVisualization import visbas
from plot_spectrum import plotHspec				from plot_spectrum import plotHspec

RHSofBV = {}							RHSofBV = {}
RHSofmJ = {}							RHSofmJ = {}

if os.path.isdir(litpath3He) == False:				if os.path.isdir(litpath3He) == False:
    os.mkdir(litpath3He)					    os.mkdir(litpath3He)
os.chdir(litpath3He)						os.chdir(litpath3He)

if os.path.isfile(litpath3He + 'kRange.dat') == True:	      <
    os.system('rm ' + litpath3He + 'kRange.dat')	      <
							      <
with open(litpath3He + 'kRange.dat', 'wb') as f:		with open(litpath3He + 'kRange.dat', 'wb') as f:
    np.savetxt(f, [anz_phot_e, phot_e_0, phot_e_d], fmt='%f')	    np.savetxt(f, [anz_phot_e, phot_e_0, phot_e_d], fmt='%f')
f.close()							f.close()

siffux = '_ref'						      |	he_iw, he_rw, he_frgs = retrieve_he3_widths(helionpath + 'INQ
he_iw, he_rw, he_frgs = retrieve_he3_widths(helionpath + 'INQ <

if 'construe_fresh_helion' in cal:				if 'construe_fresh_helion' in cal:

							      >	    siffux = '_ref'
    os.chdir(helionpath)					    os.chdir(helionpath)
    print('(working dir) %s' % helionpath)			    print('(working dir) %s' % helionpath)

    os.system('cp INLUCN%s INLUCN' % siffux)			    os.system('cp INLUCN%s INLUCN' % siffux)
    os.system(BINBDGpath + 'LUDW_CN.exe')			    os.system(BINBDGpath + 'LUDW_CN.exe')
    os.system('cp INLU%s INLU' % siffux)			    os.system('cp INLU%s INLU' % siffux)
    os.system(BINBDGpath + 'DRLUD.exe')				    os.system(BINBDGpath + 'DRLUD.exe')
    os.system('cp INOB%s INOB' % siffux)			    os.system('cp INOB%s INOB' % siffux)
    os.system(BINBDGpath + 'KOBER.exe')				    os.system(BINBDGpath + 'KOBER.exe')
    os.system('cp DRINOB%s INOB' % siffux)		      <
    os.system(BINBDGpath + 'DROBER.exe')			    os.system(BINBDGpath + 'DROBER.exe')
    os.system('cp INQUA_N%s INQUA_N' % siffux)			    os.system('cp INQUA_N%s INQUA_N' % siffux)
    repl_line('INQUA_N', 1, potnn + '\n')			    repl_line('INQUA_N', 1, potnn + '\n')
    os.system(BINBDGpath + 'QUAFL_N.exe')			    os.system(BINBDGpath + 'QUAFL_N.exe')
    repl_line('INQUA_N', 1, potnnn + '\n')			    repl_line('INQUA_N', 1, potnnn + '\n')
    os.system(BINBDGpath + 'DRQUA_AK_N.exe')			    os.system(BINBDGpath + 'DRQUA_AK_N.exe')
    os.system('cp INEN%s INEN' % siffux)			    os.system('cp INEN%s INEN' % siffux)
    os.system(BINBDGpath + 'DR2END_AK.exe')			    os.system(BINBDGpath + 'DR2END_AK.exe')

    EBDG = get_h_ev()[0]					    EBDG = get_h_ev()[0]
    np.savetxt('E0.dat', np.array([EBDG]), fmt='%12.4f')	    np.savetxt('E0.dat', np.array([EBDG]), fmt='%12.4f')

    os.system('cp OUTPUT end_out_b && cp INEN inen_b')		    os.system('cp OUTPUT end_out_b && cp INEN inen_b')
    os.system('cat E0.dat')					    os.system('cat E0.dat')

    rrgm_functions.parse_ev_coeffs(infil='end_out_b')		    rrgm_functions.parse_ev_coeffs(infil='end_out_b')

    subprocess.call('rm *QUAOUT*', shell=True)		      <
							      <
    print('helion ground state calculated!')			    print('helion ground state calculated!')

if 'rhs' in cal:						if 'rhs' in cal:

    os.chdir(litpath3He)					    os.chdir(litpath3He)

    for streukanal in streukas:					    for streukanal in streukas:

        Jstreu = float(streukanal.split('^')[0])		        Jstreu = float(streukanal.split('^')[0])
        Jstreustring = '%s' % str(Jstreu)[:3]			        Jstreustring = '%s' % str(Jstreu)[:3]

        mLmJl, mLrange, mJlrange = non_zero_couplings(multipo	        mLmJl, mLrange, mJlrange = non_zero_couplings(multipo
                                                      Jstreu)	                                                      Jstreu)

        # ECCE							        # ECCE
        parse_ev_coeffs(				      <
            mult=0, infil=helionpath + 'OUTPUT', outf=helionp <
        BUECO = [cof.strip() for cof in open(helionpath + 'CO	        BUECO = [cof.strip() for cof in open(helionpath + 'CO
							      <
        EBDG = get_h_ev(ifi=helionpath + 'end_out_b')[0]	        EBDG = get_h_ev(ifi=helionpath + 'end_out_b')[0]

        print('(iv)    LS-scheme: B(2,%s) = %4.4f MeV [' % (b	        print('(iv)    LS-scheme: B(2,%s) = %4.4f MeV [' % (b
                                                            E	                                                            E
              get_h_ev(n=4, ifi=helionpath + 'end_out_b'), ']	              get_h_ev(n=4, ifi=helionpath + 'end_out_b'), ']
        print('        dim(B_0)   = %d' % len(BUECO))		        print('        dim(B_0)   = %d' % len(BUECO))

        if 'rhs_lu-ob-qua' in cal:				        if 'rhs_lu-ob-qua' in cal:

            #            he_iw = [				            #            he_iw = [
            #                np.array(ln.split(';')).astype(f	            #                np.array(ln.split(';')).astype(f
            #                    litpath3He + 'basis_struct/i	            #                    litpath3He + 'basis_struct/i
            #                    (Jstreustring, boundstatekan	            #                    (Jstreustring, boundstatekan
            #            ]					            #            ]
            #							            #
            #            he_rw = [				            #            he_rw = [
            #                np.array(ln.split(';')).astype(f	            #                np.array(ln.split(';')).astype(f
            #                    litpath3He + 'basis_struct/r	            #                    litpath3He + 'basis_struct/r
            #                    (Jstreustring, boundstatekan	            #                    (Jstreustring, boundstatekan
            #            ]					            #            ]

            lfrags = []						            lfrags = []
            sfrags = []						            sfrags = []

            for lcfg in range(len(channels[boundstatekanal]))	            for lcfg in range(len(channels[boundstatekanal]))
                sfrags = sfrags + channels[boundstatekanal][l	                sfrags = sfrags + channels[boundstatekanal][l
                for scfg in channels[boundstatekanal][lcfg][1	                for scfg in channels[boundstatekanal][lcfg][1
                    lfrags = lfrags + [channels[boundstatekan	                    lfrags = lfrags + [channels[boundstatekan
#            fragfile = [					#            fragfile = [
#                ln for ln in					#                ln for ln in
#                open(litpath3He + 'basis_struct/frags_LIT_J%	#                open(litpath3He + 'basis_struct/frags_LIT_J%
#                     (Jstreustring, boundstatekanal))		#                     (Jstreustring, boundstatekanal))
#            ]							#            ]
#            lfrags = [fr.split(' ')[1].strip() for fr in fra	#            lfrags = [fr.split(' ')[1].strip() for fr in fra
#            sfrags = [fr.split(' ')[0] for fr in fragfile]	#            sfrags = [fr.split(' ')[0] for fr in fragfile]

# read widths and frags of the LIT basis as determined via	# read widths and frags of the LIT basis as determined via
# v18uix_LITbasis.py						# v18uix_LITbasis.py
            fragfile = [					            fragfile = [
                ln for ln in					                ln for ln in
                open(litpath3He + 'basis_struct/frags_LIT_J%s	                open(litpath3He + 'basis_struct/frags_LIT_J%s
                     (Jstreustring, streukanal))		                     (Jstreustring, streukanal))
            ]							            ]
            lfrags2 = [fr.split(' ')[1].strip() for fr in fra	            lfrags2 = [fr.split(' ')[1].strip() for fr in fra
            sfrags2 = [fr.split(' ')[0] for fr in fragfile]	            sfrags2 = [fr.split(' ')[0] for fr in fragfile]

            intwLIT = [						            intwLIT = [
                np.array(ln.split(';')).astype(float).tolist(	                np.array(ln.split(';')).astype(float).tolist(
                    litpath3He + 'basis_struct/intw3heLIT_J%s	                    litpath3He + 'basis_struct/intw3heLIT_J%s
                    (Jstreustring, streukanal))			                    (Jstreustring, streukanal))
            ]							            ]

            relwLIT = [						            relwLIT = [
                np.array(ln.split(';')).astype(float).tolist(	                np.array(ln.split(';')).astype(float).tolist(
                    litpath3He + 'basis_struct/relw3heLIT_J%s	                    litpath3He + 'basis_struct/relw3heLIT_J%s
                    (Jstreustring, streukanal))			                    (Jstreustring, streukanal))
            ]							            ]

            if 'dbg' in cal:					            if 'dbg' in cal:
                print(						                print(
                    '\n3He components (full) + LIT-basis comp	                    '\n3He components (full) + LIT-basis comp
                    len(lfrags))				                    len(lfrags))
                print(sfrags)					                print(sfrags)
                print('\nLIT-basis components (full):\n', len	                print('\nLIT-basis components (full):\n', len
                print(sfrags2)					                print(sfrags2)

            for lit_zerl in range(len(lfrags2)):		            for lit_zerl in range(len(lfrags2)):

                if os.path.isdir(litpath3He + 'tmp_%d' % lit_	                if os.path.isdir(litpath3He + 'tmp_%d' % lit_
                    os.mkdir(litpath3He + 'tmp_%d' % lit_zerl	                    os.mkdir(litpath3He + 'tmp_%d' % lit_zerl
                os.chdir(litpath3He + 'tmp_%d' % lit_zerl)	                os.chdir(litpath3He + 'tmp_%d' % lit_zerl)

                for file in os.listdir(os.getcwd()):		                for file in os.listdir(os.getcwd()):
                    if fnmatch.fnmatch(file, '*endlit*_J%3.1f |	                    if fnmatch.fnmatch(file, 'endlit*_J%3.1f_
							      >	                        print('I would have deleted <inen> fi
							      >	                        exit()
                        if 'dbg' in cal:			                        if 'dbg' in cal:
                            print('removing old <*en*lit*> fi	                            print('removing old <*en*lit*> fi
                        os.system('rm *endlit*_J%3.1f_*.log'  |	                        os.system('rm *endlit*_J%3.1f_*.log'%
                        break					                        break
                for file in os.listdir(os.getcwd()):		                for file in os.listdir(os.getcwd()):
                    if fnmatch.fnmatch(file, 'inhomo*_J%3.1f_ |	                    if fnmatch.fnmatch(file, 'inhomo*_J%3.1f_
							      >	                        print('I would have deleted <inhomo> 
							      >	                        exit()
                        if 'dbg' in cal:			                        if 'dbg' in cal:
                            print('removing old <*inhomo*> fi	                            print('removing old <*inhomo*> fi
                        os.system('rm inhomo*_J%3.1f_*.log' % |	                        os.system('rm inhomo*_J%3.1f_*.log'%J
                        break					                        break

                lit_3inqua_seq(					                lit_3inqua_seq(
                    intwi=he_iw + [intwLIT[lit_zerl]],		                    intwi=he_iw + [intwLIT[lit_zerl]],
                    relwi=he_rw + [relwLIT[lit_zerl]],		                    relwi=he_rw + [relwLIT[lit_zerl]],
                    anzo=11,					                    anzo=11,
                    LREG='  1  0  0  0  0  0  0  0  0  1  1',	                    LREG='  1  0  0  0  0  0  0  0  0  1  1',
                    outfile=litpath3He + 'tmp_%d/INQUA' % (li	                    outfile=litpath3He + 'tmp_%d/INQUA' % (li
                lit_3inlu(					                lit_3inlu(
                    mul=multipolarity,				                    mul=multipolarity,
                    frag=lfrags + [lfrags2[lit_zerl]],		                    frag=lfrags + [lfrags2[lit_zerl]],
                    fn=litpath3He + 'tmp_%d/INLU' % (lit_zerl	                    fn=litpath3He + 'tmp_%d/INLU' % (lit_zerl
                lit_3inob(					                lit_3inob(
                    fr=sfrags + [sfrags2[lit_zerl]],		                    fr=sfrags + [sfrags2[lit_zerl]],
                    fn=litpath3He + 'tmp_%d/INOB' % (lit_zerl	                    fn=litpath3He + 'tmp_%d/INOB' % (lit_zerl

        leftpar = int(1 + 0.5 * (1 + (-1)**			        leftpar = int(1 + 0.5 * (1 + (-1)**
                                 (int(channels[streukanal][0]	                                 (int(channels[streukanal][0]
                                      ) + int(channels[streuk	                                      ) + int(channels[streuk

        def cal_rhs_lu_ob_qua(para, procnbr):			        def cal_rhs_lu_ob_qua(para, procnbr):

            slave_pit = litpath3He + 'tmp_%d' % para		            slave_pit = litpath3He + 'tmp_%d' % para
            cmdlu = BINLITpath + 'luise.exe > dump'		            cmdlu = BINLITpath + 'luise.exe > dump'
            cmdob = BINLITpath + 'obem.exe > dump'		            cmdob = BINLITpath + 'obem.exe > dump'
            cmdqu = BINLITpath + 'qual.exe'			            cmdqu = BINLITpath + 'qual.exe'
            print('%s in %s' % (cmdlu, slave_pit))		            print('%s in %s' % (cmdlu, slave_pit))
            plu = subprocess.Popen(				            plu = subprocess.Popen(
                shlex.split(cmdlu),				                shlex.split(cmdlu),
                stdout=subprocess.PIPE,				                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,				                stderr=subprocess.PIPE,
                cwd=slave_pit)					                cwd=slave_pit)
            out, err = plu.communicate()			            out, err = plu.communicate()
            print('process = %d-1 : luise exits.' % para)	            print('process = %d-1 : luise exits.' % para)

            print('%s in %s' % (cmdob, slave_pit))		            print('%s in %s' % (cmdob, slave_pit))
            pob = subprocess.Popen(				            pob = subprocess.Popen(
                shlex.split(cmdob),				                shlex.split(cmdob),
                stdout=subprocess.PIPE,				                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,				                stderr=subprocess.PIPE,
                cwd=slave_pit)					                cwd=slave_pit)
            out, err = pob.communicate()			            out, err = pob.communicate()
            print('process = %d-1 : ober exits.' % para)	            print('process = %d-1 : ober exits.' % para)

            print('%s in %s' % (cmdqu, slave_pit))		            print('%s in %s' % (cmdqu, slave_pit))
            pqu = subprocess.Popen(				            pqu = subprocess.Popen(
                shlex.split(cmdqu),				                shlex.split(cmdqu),
                stdout=subprocess.PIPE,				                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,				                stderr=subprocess.PIPE,
                cwd=slave_pit)					                cwd=slave_pit)
            out, err = pqu.communicate()			            out, err = pqu.communicate()
            print('process = %d-1 : qual exits.' % para)	            print('process = %d-1 : qual exits.' % para)

        def cal_rhs_end(para, procnbr):				        def cal_rhs_end(para, procnbr):

            slave_pit = litpath3He + 'tmp_%d/' % para[3]	            slave_pit = litpath3He + 'tmp_%d/' % para[3]

            inenf = 'inenlit%d-%d_J%3.1f_mJ%3.1f-mL%d.log' % 	            inenf = 'inenlit%d-%d_J%3.1f_mJ%3.1f-mL%d.log' % 
                                                             	                                                             
                                                             	                                                             
                                                             	                                                             
            outfseli = 'endlit%d-%d_J%3.1f_mJ%3.1f-mL%d.log' 	            outfseli = 'endlit%d-%d_J%3.1f_mJ%3.1f-mL%d.log' 
                para[1],					                para[1],
                para[2],					                para[2],
                Jstreu,						                Jstreu,
                para[0][1],					                para[0][1],
                para[0][0],					                para[0][0],
            )							            )
            outfsbare = 'inhomo%d-%d_J%3.1f_mJ%3.1f-mL%d.log'	            outfsbare = 'inhomo%d-%d_J%3.1f_mJ%3.1f-mL%d.log'
                para[1],					                para[1],
                para[2],					                para[2],
                Jstreu,						                Jstreu,
                para[0][1],					                para[0][1],
                para[0][0],					                para[0][0],
            )							            )

            lit_3inen(						            lit_3inen(
                MREG='  1  0  0  0  0  0  0  0  0  1  1',	                MREG='  1  0  0  0  0  0  0  0  0  1  1',
                #                   (shifted) QBV            	                #                   (shifted) QBV            
                KSTREU=[para[1], para[2]],			                KSTREU=[para[1], para[2]],
                JWSL=Jstreu,					                JWSL=Jstreu,
                JWSLM=para[0][1],				                JWSLM=para[0][1],
                MULM2=para[0][0],				                MULM2=para[0][0],
                NPARL=leftpar,					                NPARL=leftpar,
                JWSR=J0,					                JWSR=J0,
                NPARR=2,					                NPARR=2,
                EB=EBDG,					                EB=EBDG,
                BUECO=BUECO,					                BUECO=BUECO,
                NZE=anz_phot_e,					                NZE=anz_phot_e,
                EK0=phot_e_0,					                EK0=phot_e_0,
                EKDIFF=phot_e_d,				                EKDIFF=phot_e_d,
                bnd=helionpath + 'INEN',			                bnd=helionpath + 'INEN',
                outfile=slave_pit + inenf)			                outfile=slave_pit + inenf)

            cmdend = BINLITpath + 'enemb.exe %s %s %s' % (ine	            cmdend = BINLITpath + 'enemb.exe %s %s %s' % (ine
                                                          out	                                                          out

            pend = subprocess.Popen(				            pend = subprocess.Popen(
                shlex.split(cmdend),				                shlex.split(cmdend),
                stdout=subprocess.PIPE,				                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,				                stderr=subprocess.PIPE,
                cwd=slave_pit)					                cwd=slave_pit)
            out, err = pend.communicate()			            out, err = pend.communicate()

            return (out, err)					            return (out, err)

        parameter_set_lu_ob_qua = range(len(lfrags2))		        parameter_set_lu_ob_qua = range(len(lfrags2))
        parameter_set_end = []					        parameter_set_end = []

        wfn = litpath3He + 'basis_struct/LITbas_full_J%s_%s.d	        wfn = litpath3He + 'basis_struct/LITbas_full_J%s_%s.d
            Jstreustring, streukanal)				            Jstreustring, streukanal)

        print('[...] reading BV-rw tupel from %s' % wfn)	        print('[...] reading BV-rw tupel from %s' % wfn)
        litbas = np.loadtxt(wfn).astype(int)			        litbas = np.loadtxt(wfn).astype(int)

        for lit_zerl in range(len(lfrags2)):			        for lit_zerl in range(len(lfrags2)):
            bsbv = sum([len(b) for b in he_iw])			            bsbv = sum([len(b) for b in he_iw])
            parameter_set = []					            parameter_set = []
            bvrange = range(					            bvrange = range(
                sum([len(z) for z in intwLIT[:lit_zerl]]) + 1	                sum([len(z) for z in intwLIT[:lit_zerl]]) + 1
                sum([len(z) for z in intwLIT[:lit_zerl]]) + 1	                sum([len(z) for z in intwLIT[:lit_zerl]]) + 1
                len(intwLIT[lit_zerl]))				                len(intwLIT[lit_zerl]))

            litbas3 = []					            litbas3 = []
            for bv in filter(lambda x: (x[0] in bvrange), lit	            for bv in filter(lambda x: (x[0] in bvrange), lit
                litbas3.append([int(bv[0] - (bvrange[0] - 1) 	                litbas3.append([int(bv[0] - (bvrange[0] - 1) 

            with open(litpath3He + 'tmp_%d/LITbas_full_J%s.da	            with open(litpath3He + 'tmp_%d/LITbas_full_J%s.da
                      (lit_zerl, Jstreustring), 'wb') as f:	                      (lit_zerl, Jstreustring), 'wb') as f:
                np.savetxt(f, [[jj[0], jj[1]] for jj in litba	                np.savetxt(f, [[jj[0], jj[1]] for jj in litba
            f.close()						            f.close()

            for mM in mLmJl:					            for mM in mLmJl:
                for bv in filter(lambda x: (x[0] in bvrange),	                for bv in filter(lambda x: (x[0] in bvrange),
                    parameter_set.append([			                    parameter_set.append([
                        mM,					                        mM,
                        int(bv[0] - (bvrange[0] - 1) + bsbv),	                        int(bv[0] - (bvrange[0] - 1) + bsbv),
                    ])						                    ])

            parameter_set_end.append(parameter_set)		            parameter_set_end.append(parameter_set)

        if 'rhs-qual' in cal:					        if 'rhs-qual' in cal:
            parameter_set = parameter_set_lu_ob_qua		            parameter_set = parameter_set_lu_ob_qua
            results = []					            results = []
            pool = ThreadPool(anzproc)				            pool = ThreadPool(anzproc)
            for procnbr in range(len(parameter_set)):		            for procnbr in range(len(parameter_set)):
                pars = parameter_set[procnbr]			                pars = parameter_set[procnbr]
                results.append(					                results.append(
                    pool.apply_async(cal_rhs_lu_ob_qua, (	                    pool.apply_async(cal_rhs_lu_ob_qua, (
                        pars,					                        pars,
                        procnbr,				                        procnbr,
                    )))						                    )))
            pool.close()					            pool.close()
            pool.join()						            pool.join()

							      >	#            os.system('mv '+litpath3He+'tmp_*/ o*_J%3.1f_*.l
							      >
							      >	            exit()
							      >
        if 'rhs-end' in cal:					        if 'rhs-end' in cal:
            for lit_zerl in range(len(lfrags2)):		            for lit_zerl in range(len(lfrags2)):
                print('werkle in %d' % lit_zerl)		                print('werkle in %d' % lit_zerl)
                results = []					                results = []
                pool = ThreadPool(anzproc)			                pool = ThreadPool(anzproc)
                parameter_set = parameter_set_end[lit_zerl]	                parameter_set = parameter_set_end[lit_zerl]
                for procnbr in range(len(parameter_set)):	                for procnbr in range(len(parameter_set)):

                    pars = parameter_set[procnbr]		                    pars = parameter_set[procnbr]

                    results.append(				                    results.append(
                        pool.apply_async(cal_rhs_end, (		                        pool.apply_async(cal_rhs_end, (
                            pars,				                            pars,
                            procnbr,				                            procnbr,
                        )))					                        )))

                pool.close()					                pool.close()
                pool.join()					                pool.join()

							      >	            exit()
							      >
if 'lhs' in cal:						if 'lhs' in cal:

    print('(ii)    calculating norm/ham in scattering-channel	    print('(ii)    calculating norm/ham in scattering-channel

    if os.path.isdir(litpath3He + 'lit_bas_lhs/') == False:	    if os.path.isdir(litpath3He + 'lit_bas_lhs/') == False:
        os.mkdir(litpath3He + 'lit_bas_lhs/')			        os.mkdir(litpath3He + 'lit_bas_lhs/')
    os.chdir(litpath3He + 'lit_bas_lhs/')			    os.chdir(litpath3He + 'lit_bas_lhs/')

    for streukanal in streukas:					    for streukanal in streukas:

        Jstreu = float(streukanal.split('^')[0])		        Jstreu = float(streukanal.split('^')[0])
        Jstreustring = '%s' % str(Jstreu)[:3]			        Jstreustring = '%s' % str(Jstreu)[:3]

        fragfile = [						        fragfile = [
            ln							            ln
            for ln in open(litpath3He + 'basis_struct/frags_L	            for ln in open(litpath3He + 'basis_struct/frags_L
                           (Jstreustring, streukanal))		                           (Jstreustring, streukanal))
        ]							        ]

        lfrags = [fr.split(' ')[1].strip() for fr in fragfile	        lfrags = [fr.split(' ')[1].strip() for fr in fragfile
        sfrags = [fr.split(' ')[0] for fr in fragfile]		        sfrags = [fr.split(' ')[0] for fr in fragfile]

        intwLIT = [						        intwLIT = [
            np.array(ln.split(';')).astype(float)		            np.array(ln.split(';')).astype(float)
            for ln in open(litpath3He + 'basis_struct/intw3he	            for ln in open(litpath3He + 'basis_struct/intw3he
                           (Jstreustring, streukanal))		                           (Jstreustring, streukanal))
        ]							        ]

        anzLITbv = sum([len(frgm) for frgm in intwLIT])		        anzLITbv = sum([len(frgm) for frgm in intwLIT])

        if (len([len(frgm) for frgm in intwLIT]) != (len(frag	        if (len([len(frgm) for frgm in intwLIT]) != (len(frag
            print('LIT-basis fragments inconcistent!',		            print('LIT-basis fragments inconcistent!',
                  len([len(frgm) for frgm in intwLIT]), (len(	                  len([len(frgm) for frgm in intwLIT]), (len(
            exit()						            exit()

        relwLIT = [						        relwLIT = [
            np.array(ln.split(';')).astype(float)		            np.array(ln.split(';')).astype(float)
            for ln in open(litpath3He + 'basis_struct/relw3he	            for ln in open(litpath3He + 'basis_struct/relw3he
                           (Jstreustring, streukanal))		                           (Jstreustring, streukanal))
        ]							        ]

        if 'dbg' in cal:					        if 'dbg' in cal:
            print(lfrags, sfrags)				            print(lfrags, sfrags)
            #print(intwLIT, relwLIT)				            #print(intwLIT, relwLIT)

        Jstreu = float(streukanal.split('^')[0])		        Jstreu = float(streukanal.split('^')[0])

        if 'lhs_lu-ob-qua' in cal:				        if 'lhs_lu-ob-qua' in cal:

            os.chdir(pathbase + '/data/eob/')			            os.chdir(pathbase + '/data/eob/')
            n3_inob(						            n3_inob(
                [						                [
                    'he_no1', 'he_no1i', 'he_no2', 'he_no2i',	                    'he_no1', 'he_no1i', 'he_no2', 'he_no2i',
                    'he_no6i', 'he_no3i', 'he_no5i'		                    'he_no6i', 'he_no3i', 'he_no5i'
                ],						                ],
                8,						                8,
                fn='INOB',					                fn='INOB',
                indep=+1)					                indep=+1)
            os.system(BINBDGpath + 'KOBER.exe')			            os.system(BINBDGpath + 'KOBER.exe')
            os.chdir(pathbase + '/data/eob-tni/')		            os.chdir(pathbase + '/data/eob-tni/')
            n3_inob(						            n3_inob(
                [						                [
                    'he_no1', 'he_no1i', 'he_no2', 'he_no2i',	                    'he_no1', 'he_no1i', 'he_no2', 'he_no2i',
                    'he_no6i', 'he_no3i', 'he_no5i'		                    'he_no6i', 'he_no3i', 'he_no5i'
                ],						                ],
                15,						                15,
                fn='INOB',					                fn='INOB',
                indep=+1)					                indep=+1)
            os.system(BINBDGpath + 'DROBER.exe')		            os.system(BINBDGpath + 'DROBER.exe')

            os.chdir(pathbase + '/data/elu/')			            os.chdir(pathbase + '/data/elu/')
            n3_inlu(						            n3_inlu(
                8,						                8,
                fn='INLUCN',					                fn='INLUCN',
                fr=[						                fr=[
                    '000', '202', '022', '110', '101', '011',	                    '000', '202', '022', '110', '101', '011',
                    '211', '121', '122', '212', '222', '221',	                    '211', '121', '122', '212', '222', '221',
                ],						                ],
                indep=+1)					                indep=+1)
            os.system(BINBDGpath + 'LUDW_CN.exe')		            os.system(BINBDGpath + 'LUDW_CN.exe')
            os.chdir(pathbase + '/data/elu-tni/')		            os.chdir(pathbase + '/data/elu-tni/')
            n3_inlu(						            n3_inlu(
                8,						                8,
                fn='INLU',					                fn='INLU',
                fr=[						                fr=[
                    '000', '202', '022', '110', '101', '011',	                    '000', '202', '022', '110', '101', '011',
                    '211', '121', '122', '212', '222', '221',	                    '211', '121', '122', '212', '222', '221',
                ],						                ],
                indep=+1)					                indep=+1)
            os.system(BINBDGpath + 'DRLUD.exe')			            os.system(BINBDGpath + 'DRLUD.exe')

            os.chdir(litpath3He + 'lit_bas_lhs/')		            os.chdir(litpath3He + 'lit_bas_lhs/')

            n3_inlu(8, fn='INLU', fr=lfrags, indep=-0)		            n3_inlu(8, fn='INLU', fr=lfrags, indep=-0)
            os.system(BINBDGpath + 'DRLUD.exe')			            os.system(BINBDGpath + 'DRLUD.exe')
            n3_inlu(8, fn='INLUCN', fr=lfrags, indep=-0)	            n3_inlu(8, fn='INLUCN', fr=lfrags, indep=-0)
            os.system(BINBDGpath + 'LUDW_CN.exe')		            os.system(BINBDGpath + 'LUDW_CN.exe')

            n3_inob(sfrags, 8, fn='INOB', indep=-0)		            n3_inob(sfrags, 8, fn='INOB', indep=-0)
            os.system(BINBDGpath + 'KOBER.exe')			            os.system(BINBDGpath + 'KOBER.exe')
            n3_inob(sfrags, 15, fn='INOB', indep=-0)		            n3_inob(sfrags, 15, fn='INOB', indep=-0)
            os.system(BINBDGpath + 'DROBER.exe')		            os.system(BINBDGpath + 'DROBER.exe')

            insam(len(lfrags))					            insam(len(lfrags))

            he3inqua(intwi=intwLIT, relwi=relwLIT, potf=potnn	            he3inqua(intwi=intwLIT, relwi=relwLIT, potf=potnn

            os.system('cp INQUA_N INQUA_N%s' % boundstatekana	            os.system('cp INQUA_N INQUA_N%s' % boundstatekana

            parallel_mod_of_3inqua(				            parallel_mod_of_3inqua(
                lfrags, sfrags, infile='INQUA_N', outfile='IN	                lfrags, sfrags, infile='INQUA_N', outfile='IN

            subprocess.run([					            subprocess.run([
                'mpirun', '-np',				                'mpirun', '-np',
                '%d' % anzproc, pathbase + '/src_nucl/V18_PAR	                '%d' % anzproc, pathbase + '/src_nucl/V18_PAR
            ])							            ])

            subprocess.run([pathbase + '/src_nucl/V18_PAR/sam	            subprocess.run([pathbase + '/src_nucl/V18_PAR/sam

            he3inqua(intwi=intwLIT, relwi=relwLIT, potf=potnn	            he3inqua(intwi=intwLIT, relwi=relwLIT, potf=potnn

            parallel_mod_of_3inqua(				            parallel_mod_of_3inqua(
                lfrags, sfrags, infile='INQUA_N', outfile='IN	                lfrags, sfrags, infile='INQUA_N', outfile='IN

            subprocess.run([					            subprocess.run([
                'mpirun', '-np',				                'mpirun', '-np',
                '%d' % anzproc, pathbase + '/src_nucl/UIX_PAR	                '%d' % anzproc, pathbase + '/src_nucl/UIX_PAR
            ])							            ])

            subprocess.run([pathbase + '/src_nucl/UIX_PAR/SAM	            subprocess.run([pathbase + '/src_nucl/UIX_PAR/SAM

        litbas = np.loadtxt(					        litbas = np.loadtxt(
            litpath3He + 'basis_struct/LITbas_full_J%s_%s.dat	            litpath3He + 'basis_struct/LITbas_full_J%s_%s.dat
            (Jstreustring, streukanal)).astype(int)		            (Jstreustring, streukanal)).astype(int)
        litbas = [bv for bv in np.unique(litbas, axis=0) if b	        litbas = [bv for bv in np.unique(litbas, axis=0) if b

        anzbs = []						        anzbs = []

        for lit_zerl in range(len(lfrags)):			        for lit_zerl in range(len(lfrags)):
            bvmax = 0						            bvmax = 0
            ntmp = 0						            ntmp = 0
            for mm in range(lit_zerl + 1):			            for mm in range(lit_zerl + 1):
                bvmax += len(intwLIT[mm])			                bvmax += len(intwLIT[mm])

            for bv in litbas:					            for bv in litbas:
                if bv[0] <= bvmax:				                if bv[0] <= bvmax:
                    ntmp += 1					                    ntmp += 1
                else:						                else:
                    continue					                    continue
            anzbs.append(ntmp)					            anzbs.append(ntmp)

        if len(anzbs) != len(lfrags):				        if len(anzbs) != len(lfrags):
            print('Basis blocks inconsistent. Exiting...')	            print('Basis blocks inconsistent. Exiting...')
            exit()						            exit()

        lit_zerl = 0						        lit_zerl = 0

        for anzbtmp in anzbs:					        for anzbtmp in anzbs:

            mypath = litpath3He + 'tmp_%d/' % lit_zerl		            mypath = litpath3He + 'tmp_%d/' % lit_zerl
            lit_zerl += 1					            lit_zerl += 1
            n3_inen_rhs(					            n3_inen_rhs(
                litbas,						                litbas,
                Jstreu,						                Jstreu,
                costr,						                costr,
                np.ones(len(relwLIT[0])),			                np.ones(len(relwLIT[0])),
                fn='INEN',					                fn='INEN',
                pari=0,						                pari=0,
                nzop=31,					                nzop=31,
                tni=11,						                tni=11,
                anzb=anzbtmp)					                anzb=anzbtmp)
            subprocess.run([pathbase + '/src_nucl/TDR2END_I_2	            subprocess.run([pathbase + '/src_nucl/TDR2END_I_2
            os.system('cp INEN ' + mypath + 'inen-lit-%s_1-%d	            os.system('cp INEN ' + mypath + 'inen-lit-%s_1-%d
                                                             	                                                             
            os.system('cp %s/MATOUT ' % (litpath3He + 'lit_ba |	            os.system('cp %s/MATOUT ' % (litpath3He + 'lit_ba
                      + 'norm-ham-litME-%s_1-%d' % (streukana	                      + 'norm-ham-litME-%s_1-%d' % (streukana

        #plotHspec(Jstreustring)				        #plotHspec(Jstreustring)

if 'couple' in cal:						if 'couple' in cal:

    os.system('cp ' + helionpath + 'E0.dat ' + litpath3He)	    os.system('cp ' + helionpath + 'E0.dat ' + litpath3He)

    for streukanal in streukas:					    for streukanal in streukas:

        Jstreu = float(streukanal.split('^')[0])		        Jstreu = float(streukanal.split('^')[0])
        Jstreustring = '%s' % str(Jstreu)[:3]			        Jstreustring = '%s' % str(Jstreu)[:3]

        intwLIT = [					      <
            np.array(ln.split(';')).astype(float).tolist()    <
            for ln in open(litpath3He + 'basis_struct/intw3he <
                           (Jstreustring, streukanal))	      <
        ]						      <
							      <
        bv_pro_zerl = [len(zset) for zset in intwLIT]	      <
        first_bv_pro_zerl = [				      <
            sum(bv_pro_zerl[:n]) + 1 for n in range(len(bv_pr <
        ]						      <
							      <
        relwLIT = [					      <
            np.array(ln.split(';')).astype(float).tolist()    <
            for ln in open(litpath3He + 'basis_struct/relw3he <
                           (Jstreustring, streukanal))	      <
        ]						      <
							      <
        fragfile = [						        fragfile = [
            ln							            ln
            for ln in open(litpath3He + 'basis_struct/frags_L	            for ln in open(litpath3He + 'basis_struct/frags_L
                           (Jstreustring, streukanal))		                           (Jstreustring, streukanal))
        ]							        ]

        lfrags = [fr.split(' ')[1].strip() for fr in fragfile	        lfrags = [fr.split(' ')[1].strip() for fr in fragfile

        litbas = np.loadtxt(					        litbas = np.loadtxt(
            litpath3He + 'basis_struct/LITbas_full_J%s_%s.dat	            litpath3He + 'basis_struct/LITbas_full_J%s_%s.dat
            (Jstreustring, streukanal)).astype(int)		            (Jstreustring, streukanal)).astype(int)
        litbas = [bv for bv in np.unique(litbas, axis=0) if b	        litbas = [bv for bv in np.unique(litbas, axis=0) if b

        print('He3 structure: anz[int,rel]weiten:', np.sum(he	        print('He3 structure: anz[int,rel]weiten:', np.sum(he

        bv_offset = 0						        bv_offset = 0

        RHSofBV[streukanal] = {}				        RHSofBV[streukanal] = {}
        RHSofmJ[streukanal] = {}				        RHSofmJ[streukanal] = {}

        for lit_zerl in range(len(lfrags)):			        for lit_zerl in range(len(lfrags)):

            # read uncoupled source ME's			            # read uncoupled source ME's
            os.chdir(litpath3He + 'tmp_%d' % lit_zerl)		            os.chdir(litpath3He + 'tmp_%d' % lit_zerl)

            litbas = np.loadtxt(				            litbas = np.loadtxt(
                litpath3He + 'basis_struct/LITbas_full_J%s_%s	                litpath3He + 'basis_struct/LITbas_full_J%s_%s
                (Jstreustring, streukanal)).astype(int)		                (Jstreustring, streukanal)).astype(int)
            litbas = [bv for bv in np.unique(litbas, axis=0) 	            litbas = [bv for bv in np.unique(litbas, axis=0) 

            print('werkle in %s' % os.getcwd())			            print('werkle in %s' % os.getcwd())
            tmp_iw, tmp_rw, tmp_frgs = retrieve_he3_widths('I	            tmp_iw, tmp_rw, tmp_frgs = retrieve_he3_widths('I

            he_bv = np.sum(he_frgs, axis=0)[0]			            he_bv = np.sum(he_frgs, axis=0)[0]
            print('bv in He3 : %d' % he_bv)			            print('bv in He3 : %d' % he_bv)
            bv_in_zerl = tmp_frgs[-1][0]			            bv_in_zerl = tmp_frgs[-1][0]
							      <
            print('bv in zerl : %d' % bv_in_zerl)		            print('bv in zerl : %d' % bv_in_zerl)

							      >	            print(bv_offset)
							      >
            zerl_bas = [					            zerl_bas = [
                bv for bv in litbas if first_bv_pro_zerl[lit_ |	                bv for bv in litbas
                first_bv_pro_zerl[lit_zerl + 1]		      |	                if 1+bv_offset <= bv[0] <= bv_offset + bv_in_
            ] if (lit_zerl < len(lfrags) - 1) else [	      <
                bv for bv in litbas if first_bv_pro_zerl[lit_ <
            ]							            ]
							      >	            
							      >	            zerl_bas = np.add(zerl_bas, [he_bv - bv_offset, 0

            zerl_bas = [[				      |	            print(zerl_bas)
                bv[0] + 1 + he_bv - first_bv_pro_zerl[lit_zer <
            ] for bv in zerl_bas]			      <

            photEn = []						            photEn = []

            read_uncoupled_source(				            read_uncoupled_source(
                RHSofBV[streukanal],				                RHSofBV[streukanal],
                photEn,						                photEn,
                streukanal,					                streukanal,
                basisSET=zerl_bas,				                basisSET=zerl_bas,
                firstbv=bv_offset)				                firstbv=bv_offset)
            #RHSofBV[streukanal] = read_norm(streukanal, basi	            #RHSofBV[streukanal] = read_norm(streukanal, basi
            #photEn = MeVfm * np.array(				            #photEn = MeVfm * np.array(
            #    [phot_e_0 + en * phot_e_d for en in range(an	            #    [phot_e_0 + en * phot_e_d for en in range(an
            # couple incoming state with photon multipole to 	            # couple incoming state with photon multipole to 
            couple_source(					            couple_source(
                RHSofmJ[streukanal],				                RHSofmJ[streukanal],
                streukanal,					                streukanal,
                RHSofBV[streukanal],				                RHSofBV[streukanal],
                basisSET=zerl_bas,				                basisSET=zerl_bas,
                firstbv=bv_offset)				                firstbv=bv_offset)
							      |	            bv_offset += bv_in_zerl
            bv_offset += len(zerl_bas)			      <

            if 'plt' in cal:					            if 'plt' in cal:
                fig = plt.figure(figsize=(12, 6))		                fig = plt.figure(figsize=(12, 6))

                #fig.subplots_adjust(hspace=1.4, wspace=0.4)	                #fig.subplots_adjust(hspace=1.4, wspace=0.4)
                #for i in range(len(streukas)):			                #for i in range(len(streukas)):
                i = 0						                i = 0

                ax1 = fig.add_subplot(1, 2, 1)			                ax1 = fig.add_subplot(1, 2, 1)
                ax1.set_title(r'$J^\pi=%s^%s$' % (Jstreustrin	                ax1.set_title(r'$J^\pi=%s^%s$' % (Jstreustrin
                                                  streukanal[	                                                  streukanal[
                ax1.set_xlabel('photon momentum [MeV]')		                ax1.set_xlabel('photon momentum [MeV]')
                #ax1.set_title(r'$J^\pi=%d^%s$' % (Jstreu, st	                #ax1.set_title(r'$J^\pi=%d^%s$' % (Jstreu, st

                mLmJl, mLrange, mJlrange = non_zero_couplings	                mLmJl, mLrange, mJlrange = non_zero_couplings
                    multipolarity, J0, Jstreu)			                    multipolarity, J0, Jstreu)
                mM = mLmJl[0]					                mM = mLmJl[0]
                #    for bv in litbas:				                #    for bv in litbas:
                #        print(photEn)				                #        print(photEn)
                #        print(RHSofmJ[streukas[i]][('%d-%d' 	                #        print(RHSofmJ[streukas[i]][('%d-%d' 
                #                                    '%d' % (	                #                                    '%d' % (
                #                                    '%d' % (	                #                                    '%d' % (
                #                                    '%d' % (	                #                                    '%d' % (
                #              bv[1], Jstreu, mM)		                #              bv[1], Jstreu, mM)
                #        exit()					                #        exit()

                [						                [
                    ax1.plot(					                    ax1.plot(
                        photEn,					                        photEn,
                        RHSofBV[streukanal][('%d-%d' % (bv[0]	                        RHSofBV[streukanal][('%d-%d' % (bv[0]
                                             (2 * Jstreu), '%	                                             (2 * Jstreu), '%
                                             '%d' % (2 * mult	                                             '%d' % (2 * mult
                                             (2 * mM[0]))].as	                                             (2 * mM[0]))].as
                    for bv in litbas				                    for bv in litbas
                ]						                ]

                ax2 = fig.add_subplot(1, 2, 2)			                ax2 = fig.add_subplot(1, 2, 2)
                ax2.set_xlabel('photon momentum [MeV]')		                ax2.set_xlabel('photon momentum [MeV]')
                ax2.set_ylabel(					                ax2.set_ylabel(
                    r'$\left\langle\,Jm\,\vert\,Jm\,\right\ra	                    r'$\left\langle\,Jm\,\vert\,Jm\,\right\ra
                ax2.set_title(r'$J$-coupled RHS')		                ax2.set_title(r'$J$-coupled RHS')

                [						                [
                    ax2.plot(					                    ax2.plot(
                        photEn,					                        photEn,
                        np.array(RHSofmJ[streukanal][(		                        np.array(RHSofmJ[streukanal][(
                            '%d-%d' % (bv[0], bv[1]), '%d' % 	                            '%d-%d' % (bv[0], bv[1]), '%d' % 
                            '%d' % (2 * mM[1]),			                            '%d' % (2 * mM[1]),
                            '%d' % (2 * multipolarity))].asty	                            '%d' % (2 * multipolarity))].asty
                        label=r'$BV_{%d}W^{%d}$' % (int(bv[0]	                        label=r'$BV_{%d}W^{%d}$' % (int(bv[0]
                    for bv in litbas				                    for bv in litbas
                ]						                ]

                box1 = ax1.get_position()			                box1 = ax1.get_position()
                ax1.set_position([box1.x0, box1.y0, box1.widt	                ax1.set_position([box1.x0, box1.y0, box1.widt
                box2 = ax2.get_position()			                box2 = ax2.get_position()
                ax2.set_position([box2.x0, box2.y0, box2.widt	                ax2.set_position([box2.x0, box2.y0, box2.widt

                axins = inset_axes(				                axins = inset_axes(
                    ax2,					                    ax2,
                    width="60%",				                    width="60%",
                    height="75%",				                    height="75%",
                    bbox_to_anchor=(.3, .1, .95, .35),		                    bbox_to_anchor=(.3, .1, .95, .35),
                    bbox_transform=ax2.transAxes,		                    bbox_transform=ax2.transAxes,
                    loc=3)					                    loc=3)

                [						                [
                    axins.plot(					                    axins.plot(
                        photEn,					                        photEn,
                        np.array(RHSofmJ[streukanal][(		                        np.array(RHSofmJ[streukanal][(
                            '%d-%d' % (bv[0], bv[1]), '%d' % 	                            '%d-%d' % (bv[0], bv[1]), '%d' % 
                            '%d' % (2 * mM[1]),			                            '%d' % (2 * mM[1]),
                            '%d' % (2 * multipolarity))].asty	                            '%d' % (2 * multipolarity))].asty
                        label=r'$BV_{%d}W^{%d}$' % (int(bv[0]	                        label=r'$BV_{%d}W^{%d}$' % (int(bv[0]
                    for bv in litbas				                    for bv in litbas
                ]						                ]

                # sub region of the original image		                # sub region of the original image
                x1, x2, y1, y2 = photEn[0], photEn[-1], -0.1,	                x1, x2, y1, y2 = photEn[0], photEn[-1], -0.1,
                axins.set_xlim(x1, x2)				                axins.set_xlim(x1, x2)
                axins.set_ylim(y1, y2)				                axins.set_ylim(y1, y2)
                #axins.set_xticklabels('')			                #axins.set_xticklabels('')
                #axins.set_yticklabels('')			                #axins.set_yticklabels('')

                #ax2.indicate_inset_zoom(axins)			                #ax2.indicate_inset_zoom(axins)

                fig.savefig('LITrhs_J%s.pdf' % (Jstreustring)	                fig.savefig('LITrhs_J%s.pdf' % (Jstreustring)

                fig_leg = plt.figure(figsize=(10, 8), dpi=95)	                fig_leg = plt.figure(figsize=(10, 8), dpi=95)
                ax_leg = fig_leg.add_subplot(111)		                ax_leg = fig_leg.add_subplot(111)
                # add the legend from the previous axes		                # add the legend from the previous axes
                ax_leg.legend(					                ax_leg.legend(
                    *ax2.get_legend_handles_labels(),		                    *ax2.get_legend_handles_labels(),
                    fontsize=10,				                    fontsize=10,
                    ncol=8,					                    ncol=8,
                    loc='center')				                    loc='center')
                # hide the axes frame and the x/y labels	                # hide the axes frame and the x/y labels
                ax_leg.axis('off')				                ax_leg.axis('off')
                ax_leg.set_title(r'coupled-source legend')	                ax_leg.set_title(r'coupled-source legend')
                fig_leg.savefig('LITrhs_legend_J%s.pdf' % (Js	                fig_leg.savefig('LITrhs_legend_J%s.pdf' % (Js

                print('RHS vector visualized in <LITrhs_Jxx.p \	                print('RHS vector visualized in <LITrhs_Jxx.p
